/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.com.Panel;

import DataBase.DataTable;
import DataBase.SQLDanhSachHocSinh;
import edu.com.CloseButton.CloseTabButton;
import edu.com.Dialog.InfoHS;
import edu.com.Dialog.ThemHS;
import edu.com.Dialog.chuyenlop;
import edu.com.ListKoala;
import edu.com.XuLy;
import edu.com.upbang.XuLiXau;
import java.awt.Color;
import java.awt.Component;
import java.awt.List;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Pham The Quyen
 */
public class DSHS extends javax.swing.JPanel {

    /**
     * Creates new form DSHS
     */
    public JTabbedPane center;
    private boolean isadmin = true;
    private ArrayList<Object[]> info;
    public JTable BangHS;
    public JComboBox ChonLoai;
    private TableColumnModel columnModel;

    public DSHS() {
        initComponents();
        info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh(DSHS);
        columnModel = DSHS.getColumnModel();
        columnModel.addColumnModelListener(new eventColumn());
        BangHS = DSHS;
        ChonLoai = LoaiHS;
    }

    private class eventColumn implements TableColumnModelListener {

        @Override
        public void columnAdded(TableColumnModelEvent e) {

        }

        @Override
        public void columnRemoved(TableColumnModelEvent e) {

        }

        @Override
        public void columnMoved(TableColumnModelEvent e) {
            if (e.getFromIndex() != e.getToIndex()) {
                int a, b;
                if (e.getFromIndex() < e.getToIndex()) {
                    a = e.getFromIndex();
                    b = e.getToIndex();
                } else {
                    b = e.getFromIndex();
                    a = e.getToIndex();
                }
                Object[] _a, _b;
                _a = info.get(a);
                _b = info.get(b);
                info.remove(b);
                info.remove(a);
                info.add(a, _b);
                info.add(b, _a);
            }
        }

        @Override
        public void columnMarginChanged(ChangeEvent e) {

        }

        @Override
        public void columnSelectionChanged(ListSelectionEvent e) {

        }

    }

    public void setNotAdmin() {
        this.isadmin = false;
    }

    public void reload() {
        switch (LoaiHS.getSelectedIndex()) {
            case 0:
                info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh(DSHS);
                break;
            case 1:
                info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh_Stype(DSHS, 0);
                break;
            case 2:
                info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh_Stype(DSHS, -1);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane8 = new javax.swing.JScrollPane();
        DSHS = new javax.swing.JTable(){
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column){

                Component c = super.prepareRenderer(renderer, row, column);
                if(info.get(column)[row].toString().charAt(0)=='x'){
                    c.setForeground(Color.BLACK);

                    if(LoaiHS.getSelectedIndex()==0){
                        c.setBackground(Color.BLACK);
                    }else{
                        c.setBackground(Color.WHITE);
                    }
                }else if(info.get(column)[row].toString().charAt(0)=='-'){
                    c.setForeground(Color.RED);
                    c.setBackground(Color.WHITE);
                    if(isRowSelected(row)&&isColumnSelected(column)){
                        c.setBackground(Color.BLUE);
                    }
                }else if(info.get(column)[row].toString().charAt(0)=='0'){
                    c.setForeground(Color.RED);
                    c.setBackground(Color.RED);
                    if(isRowSelected(row)&&isColumnSelected(column)&&LoaiHS.getSelectedIndex()==0){
                        c.setBackground(Color.BLUE);
                    }
                }else if(info.get(column)[row].toString().charAt(0)=='s'){
                    c.setForeground(Color.BLACK);
                    c.setBackground(Color.WHITE);
                }else{
                    c.setForeground(Color.BLACK);
                    c.setBackground(Color.WHITE);
                    if(isRowSelected(row)&&isColumnSelected(column)){
                        c.setBackground(Color.BLUE);
                    }
                }
                return c;

            }
        };
        LoaiHS = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        DSHS.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        DSHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Tên", "Trình Độ", "Lớp", "Hình Thức Học", "Ngay Sinh"
            }
        ));
        DSHS.setRowHeight(30);
        DSHS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DSHSMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(DSHS);

        LoaiHS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Học sinh đang học", "Học sinh nghỉ học", "Học sinh ra trường" }));
        LoaiHS.setMinimumSize(new java.awt.Dimension(114, 25));
        LoaiHS.setPreferredSize(new java.awt.Dimension(114, 25));
        LoaiHS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoaiHSActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/com/image/refresh25.png"))); // NOI18N
        jLabel1.setToolTipText("Tải lại");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LoaiHS, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LoaiHS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    /*
     * setID dung de chuyen id hoc sinh sang so thu tu, từ số thứ tự thì chỉ số i-1 sẽ giúp truy suất trong mang id
     * giá trị Id_student tương ứng.
     */

    private void DSHSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DSHSMouseClicked
        // TODO add your handling code here:

        if (evt.getClickCount() == 2 && isadmin) {
            switch (LoaiHS.getSelectedIndex()) {
                case 0:
                    if (Loai_1()) {
                        info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh(DSHS);
                    }
                    ;
                    break;
                case 1:
                    if (Loai_23()) {
                        info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh_Stype(DSHS, 0);
                    }
                    break;
                case 2:
                    if (Loai_23()) {
                        info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh_Stype(DSHS, -1);
                    }
                    break;
            }
        }
    }//GEN-LAST:event_DSHSMouseClicked
    public boolean Loai_1() {
        int row, col;
        row = DSHS.getSelectedRow();
        col = DSHS.getSelectedColumn();
        if (info.get(col)[row].toString().charAt(0) == '0') {
            String arr[] = info.get(col)[row].toString().split("-");
            ThemHS hs = new ThemHS(ListKoala.frame, true, Integer.parseInt(arr[arr.length - 1]));
            hs.setVisible(true);
            return hs.getButton();
        } else if (info.get(col)[row].toString().charAt(0) == '-') {
            String arr[] = info.get(col)[row].toString().split("-");
            Vector v = new SQLDanhSachHocSinh().HocSinh(Integer.parseInt(arr[1]));
            ThemHS hs = new ThemHS(ListKoala.frame, true, v, Integer.parseInt(arr[1]), Integer.parseInt(v.get(10).toString()));
            hs.setVisible(true);
            return hs.getButton();
        } else if (info.get(col)[row].toString().charAt(0) != 'x'&&info.get(col)[row].toString().charAt(0) != 's') {
            String arr[] = info.get(col)[row].toString().split("-");
            Vector v = new SQLDanhSachHocSinh().HocSinh(Integer.parseInt(arr[0]));
            ThemHS hs = new ThemHS(ListKoala.frame, true, v, Integer.parseInt(arr[0]), Integer.parseInt(v.get(10).toString()));
            hs.setVisible(true);
            return hs.getButton();
        }
        return false;
    }

    public boolean Loai_23() {
        int row, col;
        row = DSHS.getSelectedRow();
        col = DSHS.getSelectedColumn();
        if (info.get(col)[row].toString().charAt(0) == '0') {

        } else if (info.get(col)[row].toString().charAt(0) == '-') {
            String arr[] = info.get(col)[row].toString().split("-");
            Vector v = new SQLDanhSachHocSinh().HocSinh(Integer.parseInt(arr[1]));
            InfoHS hs = new InfoHS(ListKoala.frame, true, v, Integer.parseInt(arr[1]), Integer.parseInt(v.get(10).toString()));
            hs.setVisible(true);
            return hs.getButton();
        } else if (info.get(col)[row].toString().charAt(0) != 'x'&&info.get(col)[row].toString().charAt(0) != 's') {
            String arr[] = info.get(col)[row].toString().split("-");
            Vector v = new SQLDanhSachHocSinh().HocSinh(Integer.parseInt(arr[0]));
            InfoHS hs = new InfoHS(ListKoala.frame, true, v, Integer.parseInt(arr[0]), Integer.parseInt(v.get(10).toString()));
            hs.setVisible(true);
            return hs.getButton();
        }
        return false;
    }
    private void LoaiHSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoaiHSActionPerformed
        // TODO add your handling code here:
        switch (LoaiHS.getSelectedIndex()) {
            case 0:
                info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh(DSHS);
                break;
            case 1:
                info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh_Stype(DSHS, 0);
                break;
            case 2:
                info = new DataBase.SQLDanhSachHocSinh().DanhSachHocSinh_Stype(DSHS, -1);
                break;
        }
    }//GEN-LAST:event_LoaiHSActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        this.LoaiHSActionPerformed(null);
    }//GEN-LAST:event_jLabel1MouseClicked
public static void resizeColumnWidth(JTable table,int size) {
         int x = 0;
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 10; 
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width, width);
            }

            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            Object value = tableColumn.getHeaderValue();
            TableCellRenderer renderer = tableColumn.getHeaderRenderer();
            if (renderer == null) {
                renderer = table.getTableHeader().getDefaultRenderer();
            }
            Component c = renderer.getTableCellRendererComponent(table, value, false, false, -1, column);
            width = Math.max(c.getPreferredSize().width, width);
            x += width;
            columnModel.getColumn(column).setPreferredWidth(width+100);
        }
//        if(x>300){
             table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        }else{
//             table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
//        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DSHS;
    private javax.swing.JComboBox LoaiHS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane8;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.com.Dialog;

import DataBase.ConnectData;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Venus
 */
public class TaoTaiKhoan extends javax.swing.JDialog {
    private static boolean changed = false;

    /**
     * Creates new form TaoTaiKhoan
     */
    public TaoTaiKhoan(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public TaoTaiKhoan(java.awt.Frame parent) {
        super(parent);
        initComponents();
        changedAccout();
        Textfield_maNV.setEditable(false);
        Textfield_tenDangNhap.setEditable(false);
        jcbAdmin.setEnabled(false);
    }
    
    public static void setChanged(boolean changed) {
        TaoTaiKhoan.changed = changed;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Textfield_maNV = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Textfield_tenDangNhap = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TextField_MatKhau = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        Textfield_XacNhanMK = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        Textfield_email = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Textfield_SDT = new javax.swing.JTextField();
        jbtOK = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jcbAdmin = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText(" Đăng ký tài khoản mới");

        jLabel2.setText("Mã Nhân Viên :");

        Textfield_maNV.setText("Lê Tung ");
        Textfield_maNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Textfield_maNVActionPerformed(evt);
            }
        });

        jLabel3.setText("Tên Đăng Nhập:");

        Textfield_tenDangNhap.setText("LeTung");

        jLabel4.setText("Mật Khẩu:");

        TextField_MatKhau.setText("jPasswordField1");

        jLabel5.setText("Xác Nhận Mật Khẩu:");

        Textfield_XacNhanMK.setText("jPasswordField2");

        jLabel6.setText("Email:");

        Textfield_email.setText("LeTung@yahoo.com");

        jLabel7.setText("Số Điện Thoại:");

        Textfield_SDT.setText("SoDT");

        jbtOK.setText("Ok");
        jbtOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtOKMouseClicked(evt);
            }
        });
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });

        jButton2.setText("Cancle");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jcbAdmin.setText("Đặt làm Admin");
        jcbAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jbtOK, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbAdmin)
                                    .addComponent(Textfield_SDT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(118, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Textfield_email, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(Textfield_XacNhanMK, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Textfield_tenDangNhap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Textfield_maNV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TextField_MatKhau, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(116, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Textfield_maNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Textfield_tenDangNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TextField_MatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Textfield_XacNhanMK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Textfield_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(Textfield_SDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jcbAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtOK)
                    .addComponent(jButton2))
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Textfield_maNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Textfield_maNVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Textfield_maNVActionPerformed

    private void jbtOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtOKMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbtOKMouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        //if(changed == true) {
            String user;
            String password;
            String rePassword;
            String id;
            String email;
            String phoneNumber;
            String sqlCommandCurentUser = "SELECT CURRENT_USER();";
            String currentUser = "";
            ConnectData connectData = new ConnectData();
            Connection connect;        
            connect = connectData.connectionDatabase();
        //if(changed == true) {
            System.out.println(changed);
            id = Textfield_maNV.getText();
            user = Textfield_tenDangNhap.getText();
            password = TextField_MatKhau.getText();
            rePassword = Textfield_XacNhanMK.getText();
            email = Textfield_email.getText();
            phoneNumber = Textfield_SDT.getText();
        if(changed == true) {
            // Kiem tra xem co truong nao bi bo trong khong.
            if(id == null || user == null || password == null || rePassword == null || email == null || phoneNumber == null) {
                JOptionPane.showMessageDialog(null, "Bạn không được bỏ sót trường nào !", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
                Textfield_maNV.requestFocus();
            } else if
        
                // Kiem tra password va rePassword 
                (!password.equals(rePassword)) {
                JOptionPane.showMessageDialog(null, "Xác nhận mật khẩu không chính xác. Vui lòng nhập lại", "ERROR !!!", 
                        JOptionPane.ERROR_MESSAGE);
                TextField_MatKhau.requestFocus();
                } else {
                    try {
                        // Them nguoi dung vao database.
                        
                        Statement statements = connect.createStatement();
                    
                        //statements.execute(sqlCommandCurentUser);
                        String sqlCommnand = "CREATE USER '" + user + "'@'localhost' IDENTIFIED BY '" + password + "';";
                        statements.execute(sqlCommnand);
                        
                        sqlCommnand = "INSERT INTO projectkoala.accounts(Id, Faculties_Id, FullName, UserName, PassWord, Emai, "
                                + "PhoneNumber)" + " VALUES ('" + id + "', '1', '" + user + "', '" + user +  "', '" + password + 
                                "', '" + email + "', '" + phoneNumber + "');";
                        System.out.println(sqlCommnand);
                        statements.executeUpdate(sqlCommnand);
                    
                        // tao tai khoan nguoi dung
                        
                    
                    //statements.execute(sqlCommnand);
                    /*
                    ResultSet rs = statements.executeQuery(sqlCommandCurentUser);
                        //currentUser = rs.getString("user()");
                        while(rs.next()) {
                            currentUser = rs.getString(1);
                        }
                    */
                    // grand toan quyen cho user
                    if(jcbAdmin.isSelected()) {
                        statements.execute("UPDATE mysql.user SET Grant_priv='Y', Super_priv='Y' WHERE User= '" 
                                + user + "';");
                        statements.execute("FLUSH PRIVILEGES;");
                        sqlCommnand = "GRANT ALL PRIVILEGES ON *.* TO '" + user + "'@'localhost';";
                        statements.execute(sqlCommnand);
                        //sqlCommnand = "";
                        statements.executeUpdate("UPDATE projectkoala.accounts SET IsRoot = 1 WHERE UserName = '" + user + "';");
                        JOptionPane.showMessageDialog(this, "Tạo tài khoản thành công", "Thành công", JOptionPane.OK_OPTION);
                    } else {
                        sqlCommnand = "GRANT SELECT, UPDATE ON *.* TO '" + user + "'@'localhost';";
                        System.out.println(sqlCommnand);
                        statements.execute(sqlCommnand);
                        //sqlCommnand = ;
                        statements.executeUpdate("UPDATE projectkoala.accounts SET IsRoot = 0 WHERE UserName = '" + user + "';");
                        JOptionPane.showMessageDialog(this, "Tạo tài khoản thành công", "Thành công", JOptionPane.OK_OPTION);
                    }
                } catch (SQLException ex) {
                    //JOptionPane.showMessageDialog(this, "Tạo tài khoản không thành công." , "ERROR !!!", JOptionPane.ERROR_MESSAGE);
                    //ex.printStackTrace();
                    ex.printStackTrace();
                    System.out.println(ex.toString());
                        //System.out.println(ex.printStackTrace());
                    // Neu trung voi ma khac cua nguoi dung
                    if(ex.toString().equals("com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException:"
                            + " Duplicate entry '" + id + "-1" + "' for key 'PRIMARY'")) {
                        JOptionPane.showMessageDialog(this, "Bị trùng mã nhân viên", "ERROR", JOptionPane.ERROR_MESSAGE);
                        // xoa user
                        Statement stmt;
                        try {
                            stmt = connect.createStatement();
                            stmt.execute("DROP USER '" + user + "'@'localhost';");
                        } catch (SQLException ex1) {
                            Logger.getLogger(TaoTaiKhoan.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                        
                    }
                    
                    
                    // Neu ma nhan vien khong dung cu phap
                    if(ex.toString().equals("java.sql.SQLException: Incorrect integer value: " + "'" +id + "'" +
                            " for column 'Id' at row 1") || ex.toString().equals("java.sql.SQLException: Field "
                                    + "'Id' doesn't have a default value")) {
                        try {
                            JOptionPane.showMessageDialog(this, "Mã nhân viên sai cú pháp", "ERROR", JOptionPane.ERROR_MESSAGE);
                            // xoa user
                            Statement stmt = connect.createStatement();
                            stmt.execute("DROP USER '" + user + "'@'localhost';");
                        } catch (SQLException ex1) {
                            Logger.getLogger(TaoTaiKhoan.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                    
                    // Neu khong tao thanh cong
                    String sqlERR = "java.sql.SQLException: Operation CREATE USER failed for "
                            + "'" + user +"'@'localhost'";
                        System.out.println(sqlERR);
                    if(ex.toString().equals(sqlERR)) {
                        JOptionPane.showMessageDialog(this, "Tạo tài khoản không thành công. \n Tài khoản đã được dùng. Bạn"
                                + " phải tạo tài khoản khác !",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    // Neu khong thanh cong thi xoa du lieu da them vao truoc do de tranh bi trung lap
                    if(ex.toString().equals("com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: "
                            + "Access denied; you need (at least one of) the CREATE USER privilege(s) for this operation")) {
                        JOptionPane.showMessageDialog(this, "Bạn không đủ quyền tạo thêm tài khoản mới !!", "ERROR", 
                                JOptionPane.ERROR_MESSAGE);
                        dispose();
                        //System.out.println("");
                    }
                    /*
                    // Khong co quyen them vao tai khoan moi.
                    String[] slipUser = currentUser.split("@");
                    String err = "com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: INSERT "
                            + "command denied to user '" + slipUser[0] + "'@'" + slipUser[1] + "' for table 'accounts'";
                    System.out.println(err);
                    if(ex.toString().equals(err)) {
                        JOptionPane.showMessageDialog(this, "Bạn không đủ quyền thêm tài khoản mới !!!", "ERROR", 
                                JOptionPane.ERROR_MESSAGE);
                    } */
                } finally {
                    System.out.println("OK");
                }
            }
        
        
        } else {     
            connect = connectData.connectionDatabase();
            
            if(password == null || rePassword == null || email == null || phoneNumber == null) {
                JOptionPane.showMessageDialog(this, "Bạn không được bỏ sót trường nào !!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            } else if(!password.equals(rePassword)) {
                JOptionPane.showMessageDialog(this, "Xác nhận mật khẩu không chính xác. Vui lòng nhập lại", "Thông báo",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    Statement statements = connect.createStatement();
                    //if(TextField_MatKhau.getText() != Textfield_XacNhanMK.getText()) {
                     //   JOptionPane.showMessageDialog(this, "", email, WIDTH);
                    //}
                    if(! password.equals(rePassword)) {
                        JOptionPane.showMessageDialog(this, "Xác nhận mật khẩu không đúng !", "ERROR", 
                                JOptionPane.ERROR_MESSAGE);
                    }
                    statements.execute("SET PASSWORD = PASSWORD('" + password + "');");
                    connectData.setPassword(password);
                    statements.execute("UPDATE projectkoala.accounts SET PassWord = '" + password + "', "
                            + "Emai = '" + email + "', PhoneNumber = '" 
                    + phoneNumber + "' WHERE UserName = '" + user +"';");
                    
                    JOptionPane.showMessageDialog(this, "Chỉnh sửa thành công !", "Thành công", JOptionPane.OK_OPTION);
                } catch (SQLException ex) {
                    Logger.getLogger(TaoTaiKhoan.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }//GEN-LAST:event_jbtOKActionPerformed
    
    private void changedAccout() {
        String currentUser = "";
        String sqlCommandCurentUser = "SELECT CURRENT_USER();";
        ConnectData connectData = new ConnectData();
            Connection connect;
                    
            connect = connectData.connectionDatabase();
                try {
                    Statement statements = connect.createStatement();
                    ResultSet rs = statements.executeQuery(sqlCommandCurentUser);
                    while(rs.next()) 
                        currentUser = rs.getString(1);
                } catch (SQLException ex) {
                    Logger.getLogger(TaoTaiKhoan.class.getName()).log(Level.SEVERE, null, ex);
                }
            String[] splitUser = currentUser.split("@");
            Textfield_tenDangNhap.setText(splitUser[0]);
                try {
                    Statement statements = connect.createStatement();
                    ResultSet rs = statements.executeQuery("SELECT * FROM projectkoala.accounts WHERE "
                            + "projectkoala.accounts.UserName = '" + splitUser[0] + "';");
                    while(rs.next()) {
                        String resultID = rs.getString(1);
                        Textfield_maNV.setText(resultID);
                        String resultPassword = rs.getString(5);
                        TextField_MatKhau.setText(resultPassword);
                        Textfield_XacNhanMK.setText(resultPassword);
                        String resultEmail = rs.getString(6);
                        Textfield_email.setText(resultEmail);
                        String reslutPhone = rs.getString(7);
                        Textfield_SDT.setText(reslutPhone);
                        
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(TaoTaiKhoan.class.getName()).log(Level.SEVERE, null, ex);
                }
    }
    
    private void jcbAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAdminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbAdminActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaoTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaoTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaoTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaoTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TaoTaiKhoan dialog = new TaoTaiKhoan(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField TextField_MatKhau;
    private javax.swing.JTextField Textfield_SDT;
    private javax.swing.JPasswordField Textfield_XacNhanMK;
    private javax.swing.JTextField Textfield_email;
    private javax.swing.JTextField Textfield_maNV;
    private javax.swing.JTextField Textfield_tenDangNhap;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton jbtOK;
    private javax.swing.JCheckBox jcbAdmin;
    // End of variables declaration//GEN-END:variables
}

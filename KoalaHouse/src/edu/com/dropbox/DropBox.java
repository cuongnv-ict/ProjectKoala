/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.com.dropbox;

import com.dropbox.core.DbxAppInfo;
import com.dropbox.core.DbxAuthFinish;
import com.dropbox.core.DbxClient;
import com.dropbox.core.DbxEntry;
import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.DbxWebAuthNoRedirect;
import com.dropbox.core.DbxWriteMode;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.security.CodeSource;
import java.util.Locale;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Timer;
import javax.swing.JOptionPane;

/**
 *
 * @author nguyenvan
 */
public class DropBox extends javax.swing.JDialog {

    /**
     * Creates new form DropBox
     */
    private final String APP_KEY = "igdll4glh5dx3nz";
    private final String APP_SECRET = "v2yy459mvy8yjj5";
    private final String NAME = "KoalaHouse.sql";
    private DbxAppInfo appInfo;
    private DbxRequestConfig config;
    private DbxWebAuthNoRedirect webAuth;
    private DbxAuthFinish authFinish;
    private DbxClient client;
    private boolean flags;
    private FileInputStream inputStream;
    boolean current = false;
    boolean f_up, f_dow;

    public DropBox(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        flags = false;
        appInfo = new DbxAppInfo(APP_KEY, APP_SECRET);
        config = new DbxRequestConfig("JavaTutorial/1.0", Locale.getDefault().toString());
        webAuth = new DbxWebAuthNoRedirect(config, appInfo);
        upload.setEnabled(false);
        download.setEnabled(false);
        f_up = false;
        f_dow = false;
        this.setLocation(Toolkit.getDefaultToolkit().getScreenSize().width / 2 - 300, Toolkit.getDefaultToolkit().getScreenSize().height / 2 - 200);
        this.setResizable(false);
        Timer a = new Timer();
        a.schedule(new Task(), 0, 10);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dispose();
            }
        });
        current = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        text_code = new javax.swing.JTextField();
        codeDrop = new javax.swing.JButton();
        upload = new javax.swing.JButton();
        download = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Nhấn Allow sau đó copy mã code vào đây để xác nhận thao tác dữ liệu.");

        codeDrop.setText("Lấy mã");
        codeDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeDropActionPerformed(evt);
            }
        });

        upload.setText("Lưu trữ dữ liệu");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        download.setText("Khôi phục dữ liệu");
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        jLabel2.setText("Để sao lưu dữ liệu,vui lòng lấy mã xác nhận trên tài khoản DropBox.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_code, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(codeDrop, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(upload, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(download, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_code, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codeDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upload, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(download, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(173, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private class Task extends TimerTask {

        @Override
        public void run() {
//            jProgressBar1.setIndeterminate(current);
            if (current) {
                current = false;
                if (flags) {
                    String code = text_code.getText().trim();
                    try {
                        authFinish = webAuth.finish(code);
                        client = new DbxClient(config, authFinish.accessToken);
                        text_code.setEditable(false);
                        codeDrop.setEnabled(false);
                        upload.setEnabled(true);
                        download.setEnabled(true);
                    } catch (DbxException ex) {
                       JOptionPane.showMessageDialog(rootPane, "Mã xác thực không chính xác", "Kết nối Internet", JOptionPane.ERROR_MESSAGE);
                    } finally {
                        jProgressBar1.setIndeterminate(false);
                    }
                } else {
                    try {
                        Desktop.getDesktop().browse(java.net.URI.create(webAuth.start()));
                        flags = true;
                        codeDrop.setText("Xác nhận");

                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(rootPane, "Lỗi kết nối", "Kết nối Internet", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            if (f_up) {
                f_up = false;
                try {
                    // TODO add your handling code here:
                    CodeSource codeSource = DropBox.class.getProtectionDomain().getCodeSource();
                    File jarFile = new File(codeSource.getLocation().toURI().getPath());
                    String jarDir = jarFile.getParentFile().getPath();
                    if (Import_ExportSQL.ExportSQL(jarDir + "\\" + NAME)) {
                        File inputFile = new File(jarDir + "\\" + NAME);
                        inputStream = new FileInputStream(inputFile);
                        try {
                            client.delete("/" + NAME);

                        } catch (DbxException ex) {
                        } finally {
                            try {
                                client.uploadFile("/" + NAME, DbxWriteMode.add(), inputFile.length(), inputStream);
                                inputStream.close();
                            } catch (IOException ex) {
                                 JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                            } catch (DbxException ex) {
                                 JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Không thể sao chép dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                    }
                } catch (URISyntaxException ex) {
                   JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                } catch (FileNotFoundException ex) {
                     JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                } finally {
                    jProgressBar1.setIndeterminate(false);
                }
            }
            if (f_dow) {
                f_dow = false;
                try {
                    // TODO add your handling code here:
                    CodeSource codeSource = DropBox.class.getProtectionDomain().getCodeSource();
                    File jarFile = new File(codeSource.getLocation().toURI().getPath());
                    String jarDir = jarFile.getParentFile().getPath();
                    FileOutputStream outputStream = new FileOutputStream(jarDir + "\\" + NAME);
                    try {
                        client.getFile("/" + NAME, null, outputStream);
                        if (Import_ExportSQL.ImportSQL(jarDir + "\\" + NAME)) {
                           
                        } else {
                             JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (DbxException ex) {
                         JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                    } catch (IOException ex) {
                         JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                    } finally {
                        try {
                            outputStream.close();
                        } catch (IOException ex) {
                             JOptionPane.showMessageDialog(rootPane, "Lỗi đồng bộ dữ liệu",null, JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } catch (URISyntaxException ex) {
                    Logger.getLogger(DropBox.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DropBox.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    jProgressBar1.setIndeterminate(false);
                }
            }
        }

    };
    private void codeDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeDropActionPerformed
        // TODO add your handling code here:
        if (flags) {
            jProgressBar1.setIndeterminate(true);
        }
        current = true;
    }//GEN-LAST:event_codeDropActionPerformed

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        f_up = true;
        jProgressBar1.setIndeterminate(true);
    }//GEN-LAST:event_uploadActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        f_dow = true;
        jProgressBar1.setIndeterminate(true);
    }//GEN-LAST:event_downloadActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton codeDrop;
    private javax.swing.JButton download;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField text_code;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables
}
